GIT 代码管理工具

一,关于GIT
  1,定义:git是一个开源的分布式版本控制系统,用于高效的管理大小项目和文件.
  2,代码管理工具:git svn(Windows)
    ①防止代码丢失,做备份
    ②代码版本管控,通过设置节点在多个版本间切换
    ③建立分支各自开发互不影响,方便合并
    ④多人协同,方便代码的共享传输
  3,git特点:
    ①GIT是开源的,多在*nix下使用,可以管理各种文件.
    ②GIT是分布式的管理工具(SVN是集中式)
    ③GIT每台主机都有完整代码,数据安全,分享速度快
    ④GIT拥有更好的分支支持,方便多人协作
  4,GIT安装:
    sudo apt-get install git
二,GIT使用
  1,概念
    ①工作区:项目所在的操作目录,项目操作的区域
    ②暂存区:用来记录工作区的工作(修改)内容
    ③仓库区:用于将记录的内容备份
    ④远程仓库:远程主机上的GIT仓库
  2,git的初始化配置
    命令:git config
     ①配置系统所有客户: git config --system[选项]
        配置文件位置:/etc/gitconfig
     ②配置当前用户: git config --global[选项]
       配置文件:~/.gitconfig
     ③配置当前项目: git config [选项]
       配置文件:项目目录:/.git/config
       要求必须在项目目录下执行
    
    例:
    配置用户名:
    sudo git config --system user.name lhc
    配置邮箱:
    git config --global user.email 576478584@qq.com
    配置编译器:
    git config core.editor vscode
    查看项目配置信息
    git config --list
  3,GIT基本操作
    ①初始化仓库  git init  
      意义:将某个项目目录变为git操作目录,生成git本地仓库
          该目录即可使用git进行管理
    ②查看分支状态: git status
      说明:初始默认工作分支为master,当工作区和仓库不一致时,会有相应的提示信息
    ③将工作区内容记录到暂存区: git add(files)
      例:将file1 file2提交
        git add  file1 file2

        提交当前目录下所有文件(*,不能提交隐藏文件,隐藏文件需用指定文件提交)
        git add *
    ④取消文件暂存记录: git rm --cached [file]

    ⑤将文件同步到本地仓库区: git commit -m [message]
      说明:每次同步都需要添加同步信息,commit操作只能同步暂存区已经记录的内容
    ⑥查看commit日志:
     git log                    全部日志信息  
     git log --pretty=oneline   简易日志信息
    ⑦文件比较: git diff [file]
      说明:用于比较工作区文件和仓库文件差异
    ⑧放弃工作区修改: git checkout -- [file]
    ⑨从仓库恢复文件: git checkout [file]
    ⑩移动或删除文件并提交暂存
      git mv [file]  移动文件
      git rm [file]  删除文件
  4,版本控制命令
    ①退回到上一个commit节点: git reset --hard HEAD^
      说明:HEAD是commit指针,一个^表示后退一个commit
    ②去往指定的commit操作节点:
      git reset --hard [commit_id]
    ③查看全部历史操作: git reflog
      说明:利用该操作可以使用reset去往任意历史位置
    ④标签创建: git tag [名称] -m [message]
      标签:在工作重要位置添加的快照,保存当时的工作状态,一般用于版本迭代等
      注意:标签的message信息可以不加,但是最好添加

      将标签添加到指定的commit_id:
      git tag [名称] [commit_id] -m [message]

    ⑤查看标签
      git tag 查看标签列表
      git show [tag_name] 查看标签具体信息

    ⑥去往某个标签节点: git reset --hard [tag]
    ⑦删除标签: git tag -d [tag]

  5,临时工作区
    ①创建临时保存工作区:git stash 
      说明:将工作区未提交的修改封存,让工作区回到修改前状态
    ②查看临时工作区列表: git stash list
      说明:最新的工作区记录为stash{0}依次排列
    ③应用某个保存的工作区: git stash apply [stash]
      例: git stash apply stash@{0}
    ④删除工作区: 
      git stash drop [stash]  删除某一个工作区
      git stash clear   删除所有工作区

三,分支管理
  1,分支:每个人在原有代码的基础上建自己的工作环境,单独开发,不会干扰到其他分支操作,
        完成开发后再统一合并到主线中
  2,优点:安全,不影响分支,独立控制进度

  3,分支操作命令:
    ①查看分支情况:git branch
      说明:前面带*的表示当前正在工作的分支
    
    ②创建新的分支:git branch [branch_name]
      注意:基于某个分支创建新分支的时候原有分支最好是'干净的'
    
    ③切换工作分支: git checkout [branch_name]
      注意:git checkout -b [branch_name]可以创建并切换到
          新的分支,同时完成①②
    
    ④合并分支:git merge [branch]
      注意:表示将某个当前分支建立的分支,合并过来
          合并分支过程中可能会产生冲突,需要手动解决
          在分支操作中尽量添加新的模块,不要修改原有代码内容
    ⑤删除分支: git branch -d [branch]
      注意:没有被合并的分支不能使用该命令删除,
          如果强制删除使用-D选项: git branch -D [branch]

二,远程仓库
  1,远程仓库:远程主机上的git仓库.实际上git是分布式结构,每台主机
            上git仓库结构相似,只是把其他主机上的git仓库称为远程仓库
  2,共享仓库:git分布式结构衍生了很多工作模式,共享仓库是其中比较常用的模式之一
           普通隐藏的.git仓库不能被其他主机获取代码,共享仓库即可以将git项目共享的仓库
  3,创建自己的共享库
    ①选择共享库目录,设置目录属主
      mkdir 目录名
     chown tarena:tarena 目录名
    ②初始化该目录为git仓库,设置bare属性
      cd 目录
      git init --bare jason.git
      注:jason为共享项目名称,.git为习惯后缀
    ③将配置git目录设置为和共享仓库目录相同的属性
      chown -R tarena:tarena jason.git
  4,添加项目到共享仓库
    1,创建共享仓库连接
      git remote add origin tarena@127.0.0.1:/home/tarena/LHC/jason.git
      注意:①该操作要在本地的一个git项目中执行
          ②与远程主机的连接默认使用SSH方法
          ③origin是给远程主机起的名字

    2,删除远程主机:git remote rm [origin]
      注意:连接多个远程主机时,远程主机名是不能重复的
    3,将本地分支推送到远程共享仓库
      git push -u origin master
      注意:-u表示建立对应分支自动关联,一般首次向远程推送某个分支时使用
           git branch -a 可以查看连接的远程分支
    4,获取远程仓库项目
      git clone tarena@172.40.91.185:/home/tarena/gitrepo/tedu.git
      注意:通过clone获取的远程项目到本地直接就是一个git本地仓库
          并且与远程建立好了连接
    5,从远程获取最新代码:git pull
      注意:clone后本地项目与远程已经建立关联,pull可以直接拉取
          代码到对应分支
    6,从远程获取最新内容到本地:git fetch