函数变量：
　　函数名是变量，创建函数时绑定一个函数。

　　一个函数可以作为另一个函数的实参传递
　　def myinput(fn):
    L=[1,3,5,7,9]
    return fn(L)
　　print(myinput(max))
　　print(myinput(min))
　　print(myinput(sum))

　　函数可以作为另一个函数的返回值

　　函数的嵌套定义：
　一个函数里用ｄｅｆ语句来创建其它函数

ｐｙｔｈｏｎ作用域：
　作用域是叫名字空间，是访问变量时查找变量名的范围空间。
示例：
　a=100
 def fx():
    a=10000   #a=10000和a=100是两个不同作用域内的变量
    print(a)
 fx()
 print(a)

四个作用域：
　１，局部作用域（函数内）：　　ｌｏｃａｌ（ｆｕｎｃｔｉｏｎ）　　　　　　　　　　　简写：Ｌ
　２，外部嵌套函数作用域：　　　ｅｎｃｌｏｓｉｎｇ　ｆｕｎｃｔｉｏｎ　ｌｏｃａｌ　　简写：Ｅ
　３，函数定义在模块的作用域：　Ｇｌｏｂａｌ（ｍｏｄｕｌｅ）　                    　简写：Ｇ
　４，python内置模块的作用域：　Ｂｕｉｌｔｉｏｎ（ｐｙｔｈｏｎ）　　   　　　　　　　　　　　　简写：Ｂ

　查找规则:
　　在访问变量时，先查找本地变量，然后是包裹此函数外部的字数内部的变量，之后是全局变量，最后是内置变量即：
　L > E > G > B
 在默认的情况下，变量名赋值会创建或者改变本地作用域的变量。

列表／函数　不分全局和局部，只有变量才分全局还是局部。

ｇｌｏｂａｌ语句
　作用：
　　告诉解释执行器，ｇｌｏｂａｌ语句声明的一个或多个变量，这些变量的作用域为模块即的作用域，也称全局变量
　全局声明（ｇｌｏｂａｌ）将赋值变量映射到模块文件内部的作用域
　语法：
　　ｇｌｏｂａｌ　变量１，变量２
　说明：
　１，全局变量如果要在函数内部被赋值，则必须经过全局声明（否则会被认为是局部变量）
　２，全局变量在函数内部不经过声明可以直接访问（变量已经存在并关联一个对象）
　３，不能声明局部变量，再用ｇｌｏｂａｌ声明为全局变量，此做法不符合规则
　４，ｇｌｏｂａｌ变量列表里的变量名不能出现在函数的形参列表中。

ｎｏｎｌｏｃａｌ语句
作用：
　告诉解释器，ｎｏｎｌｏｃａｌ声明的变量不是局部变量，也不是全局变量，而是外部嵌套函数内的变量
语法：
　　ｎｏｎｌｏｃａｌ　变量１，变量２
　说明：
　　１，只能在被嵌套函数内部使用
　　２，对ｎｏｎｌｏｃａｌ变量进行赋值将对外部嵌套函数作用域ｎｅｕｔｒａｌ的变量进行操作
　　３，当有两层或两层以上函数嵌套时，访问ｎｏｎｌｏｃａｌ变量只对最近一层变量进行操作
　　４，变量列表里的变量不能出现在形参列表中

ｌａｍｂｄａ　表达式（又称匿名函数）
　　作用：
　　创建一个匿名函数对象
　　同ｄｅｆ类似，但不提供函数名
　　语法：
　　ｌａｍｂｄａ[函数形参列表]：表达式
　说明:
  lambda表达式创建的函数只能包含一条表达式
　ｌａｍｂｄａ比函数简单且可以随时创建和销毁，有利于减少程序的偶合度

　示例：
　　k=lambda x,y:x+y


eval()和exec()函数
　ｅｖａｌ（s,globals=None,locals=None）把一个字符串s当成一个表达式来之执行，返回表达式执行后的结果,（当globals和locals同时存在时，先读取ｌｏｃａｌｓ内地变量，在读取global的）
　ｅｘｅｃ（s,globals=None,locals=None）　把一个字符串s当成一个函数来执行，不返回任何值
　ｅｖａｌ函数示例：
　　　s='1+2*3'
   eval(s)  # 7 将字符串直接转成表达式执行
　　
　

