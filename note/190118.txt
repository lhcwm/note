异常:exception

  错误:(导致异常的原因)
      是指由于逻辑或者语法导致一个程序无法正常执行的问题
  错误特点:
      无法预知
  
  异常:(是一种状态)
      异常是程序出错时标识的一种状态
      当异常发生时,程序不会再向下执行,而转去调用此函数的地方,待处理此错误并恢复为正常
  作用:
      用作信号通知上层调用者有错误产生需要处理
 
try语句的两种语法:
  try-except 语句
  try-finally语句

try-except 语句语法:
 语法:
  try:
     可能触发异常的语句
  except 错误类型1[as 变量1]:
     异常处理语句1
  except 错误类型2[as 变量2]:
     异常处理语句2
  except (错误类型3,错误类型4) [as 变量3]:
     异常处理语句3
   ....
 
  except:
     异常处理语句other    #用来捕获除valueerror之外的全部类型异常.
  else:
     未发生异常语句  
  finally:
     最终语句          #任何时候都会被执行

作用:
    尝试捕获异常错误,得到异常通知,将程序由异常流程转为正常流程并继续执行
说明:
    as  子句适用于绑定错误对象的变量,可以省略
    except 子句可以有一个或多个,但至少有一个
    else 最多只能有一个,也可以省略
    finally 最多只能有一个,也可以省略

python3中全部的错误类型:
参见:异常类型.html

详见:
  >>>help(__builtins__)  查看全部的类型

try-finally语句:
 语法:
  try:
    可能触发异常的语句
  finally:
    最终语句
 说明:
   finally子句不可以省略
  一定不存在except子句
 作用:
   通常用此语句来做触发异常时必须要处理的事情,无论异常是否发生,finally子句都会被执行
 注:
  try-finally语句不会改变程序的(正常/异常)状态

 示例:

raise语句:
 作用?:
  触发一个错误,让程序进入的到异常状态
  发送错误通知给调用者
 语法:
   raise 异常类型
  或
  raise 异常对象
  或
  raise #重新触发上一次异常


assert语句(断言语句)
 语法:
   assert 真值表达式,错误数据(通常是字符串)
 作用:
  当真值表达式为false ,用错误数据创建一个AssertionError类型的错误,并进入异常状态
 等同于:
  if bool(真值表达式)==false:
    raise AssertionError(错误数据)
 示例:
  

异常处理机制的用途:
  在程序调用层数较深时,向主调函数传递错误信息需要层层return
  返回比较麻烦,所以需要异常处理机制 

异常小结:
  四条语句:
  try-except  捕获异常语句,把程序转为正常状态
  try-finally  执行必须要执行的语句
  raise    发送错误通知
  assert   根据条件发送AssertionError类型的错误通知


迭代器Iterator

  访问可迭代对象的工具
  是指用iter(obj)函数返回的对象(实例)
  可以用next(it)函数获取可迭代对象的数据
函数
  iter(iterable) 从可迭代对象中返回一个迭代器,iterable必须是一个能够提供一个可迭代器的对象
 next(iterable) 从迭代器iterable中获取下一个记录,如果无法获取下一条记录,则触发StoprIteration异常

说明:
  迭代器只能往前取值,不会后退
  用iter函数可以返回一个可迭代对象的迭代器
 示例:
  L=[2,3,5,7]
  it=iter(L)
  print(next(it))  #2
  print(next(it))  #3
  print(next(it))  #5
  print(next(it))  #7
  print(next(it))  #Stop Iterration

迭代器的用途:
 迭代器对象能用next函数获取下一个元素,可以用迭代器对任何的可迭代对象进行访问和遍历


