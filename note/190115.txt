函数式编程：
　用一系列函数解决问题。
　好处：
　　用每一个函数完成细小的功能，一系列函数的任意组合可以完成大问题
　　函数仅接收输入并产生输出，不包含任何能影响输出的内部状态。

函数的可重入性：
　当一个函数没有访问除局部变量以外的变量，则此函数为可重入函数
　说明：
　可重入函数输入一定，结果必然一定。

高阶函数：ｈｉｇｈ　ｏｒｄｅｒ　ｆｕｎｃｔｉｏｎ
　满足下列条件中的一个的函数即为高阶函数
　１，函数接收一个或多个函数作为参数传入
　２，函数返回一个函数

　Ｐｙｔｈｏｎ内置的高阶函数：
　ｍａｐ，ｆｉｌｔｅｒ　，ｓｏｒｔｅｄ

　ｍａｐ函数：
　参数格式：
　　ｍａｐ（ｆｕｎｃ，ｉｔｅｒａｂｌｅ，...）
　参数：
　　ｆｕｎｃ对可迭代对象的数据进行处理的函数，　函数的参数必须与可迭代对象的个数相同。
　　ｉｔｅｒａｂｌｅ，一个或多个可迭代对象，　用来给ｍａｐ提供数据
　返回值：
　　可迭代对象

示例：
１，
　print(sum(map(lambda x:x**2,range(1,10))))　


# for x in map(lambda x:x**2,range(1,10)):
#     print(x)

２，
# for x in map(pow,range(1,5),range(4,0,-1)):
#     print(x)

print(list(map(pow,range(1,5),range(4,0,-1))))
（ｍａｐ不可直接打印）

filter函数（过滤，满足条件的滤出）
　参数格式：
　　ｆｉｌｔｅｒ（ｆｕｎｃ，ｉｔｅｒａｂｌｅ）
　参数说明：
　ｆｕｎｃ含有一个形参的数据处理函数，此函数传入的值为ｉｔｅｒａｂｌｅ中提供的数据，
　　　　　ｆｕｎｃ将对ｉｔｅｒａｂｌｅ中的每一个元素进行求布尔值，返回Ｔｒｕｅ则保留此数据，
　　　　　　否则丢弃此数据
　ｉｔｅｒａｂｌｅ提供数据的可迭代对象
　返回值：
　可迭代对象
　作用：
　筛选数据
　示例：

for x in filter(lambda x:x%2==1,range(20)):
    print(x)

可迭代对象可以用于：
　ｆｏｒ语句，三个推导式，

ｓｏｒｔｅｄ函数
　作用：
　将原可迭代对象的数据进行排序，生成排序后的列表
　格式：
　ｓｏｒｔｅｄ（ｉｔｅｒａｂｌｅ，ｋｅｙ＝Ｎｏｎｅ，ｒｅｖｅｒｓｅ＝Ｆａｌｓｅ）
　参数说明：
　ｉｔｅｒａｂｌｅ　用来提供数据的可迭代对象
　ｋｅｙ　函数是用来提供一个值，这个值将作为排序的依据（ｋｅｙ＝函数）
         　ｋｅｙ告诉每个元素执行什么操作
　ｒｅｖｅｒｓｅ　标志用来设置是否为降序排序（默认升序排序）
　示例：
　　ｌ＝[１，２，３]
　　ｌ２＝ｓｏｒｔｅｄ（ｌ）　　



递归函数：ｒｅｃｕｒｓｉｏｎ　ｆｕｎｃｔｉｏｎ
　函数直接或间接的调用自身
　示例：
 函数直接调用自身
　　ｄｅｆ　f()
           f()
    f()
　函数间接调用自身
　def fa():
     fb()
 def fb():
     fa()
 fa()

说明：
　递归一定要控制递归的层数，当符合某一条件时要终止递归调用
　几乎所有递归都能用ｗｈｉｌｅ循环来代替
递归的有缺点：
　　优点：
　　递归可以把问题简单化，让思路更为清晰，代码更为简洁
　　缺点：
　　递归因系统环境影响大，当递归深度太大时，可能会得到不可预知的结果
递归的两个阶段：
　　递推阶段：
　　　从原来问题出发，按递归公式递归，从未知得到已知，最终达到递归的终止条件
　　回归阶段：
　　　按递归终止条件求出结果，逆向逐步带入递归公式，回归原问题求解
实现方法：
　　先假设函数已经实现了原功能，在编写函数
　def fx(n):
#     print('递归进入第',n,'层')
#     fx(n+1)
#     print('递归退出第',n,'层')
# fx(1)


闭包:closure
  引用了此函数外部嵌套函数作用域的变量的函数
 闭包必须满足三个条件:
  1,必须有一个内嵌函数
  2,内嵌函数必须引用外部函数中的变量
  3,外部函数返回值必须是内嵌函数

全局变量和局部变量的区别:
 全局变量:
  一直存在,谁都可以访问和修改
 局部变量:
 只有在函数调用时存在,只能在函数内部进行访问和修改
 
闭包的注意事项:
 由于闭包会使得函数中的变量都被保存在内存中,内存消耗比较大,所以不能滥用闭包
 若内嵌函数中会对外部函数变量进行赋值,则需要声明nonlocal变量.

def cd(money):
#     def buy(obj,m):
#         nonlocal money
#         if money>m:
#             money-=m
#             print('买',obj,'花了',m,'元,剩余',money,'元')
#         else:
#             print('买',obj,'失败')
#     return buy
# child=cd(2000)
# child('变形金刚',200)
  

　
