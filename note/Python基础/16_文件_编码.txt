文本文件的写操作:
  open(文件路径名,mode='rt')
  mode 模式字符串的含义:
 r 读
 t 文本text
 w 写  以只写方式打开，删除原有文件内容(如果文件不存在，则创建该文件并以只写方式打开)
 x 创建新文件,如果文件存在则报错
 a 追加append
 详见:
  文件.html
 写方法:
 f.write()    写的内容只能是字符串
 f.writelines()  写的内容只能是可迭代对象,并且可迭代对象内的元素只能是字符串

文件文本操作:
 模式字符:
  't' (默认)
 说明:
  对文本文件的读写,需要用字符串(str)进行读写操作
  默认文件中存储的都为字符数据,在读写中会自动进行编解码转换操作
  以行为单位进行分隔,在Python内部统一用'\n'作为换行符进行分割
各操作系统的的换行符
  Linux '\n'
  windows '\r\n'
  旧的Macintosh  '\r'
  新的 Mac OS X  '\n'

 注:在VS code中右下角点LF,会出现选择LF (\n) 和 CRLF (\r\n)

文本文件的迭代读取:
 文件流对象是可迭代对象,迭代过程中将以换行符'\n'作为分隔符依次获取
 示例:
 f=open('./note.txt')
 for x in f:
    print(x)

标准输入输出文
  sys.stdin  标准输入文件(Ctrl +d输入文件结束符)  #input默认就是调用此文件
  sys.stdout 标准输出文件     #print默认就是调用此文件,关闭后print将不可用,不需要读取命令
  sys.stderr 标准错误输出文件
  模块名:sys
  注:标准文件不需要打开和关闭就可以使用

二进制文件操作:
  二进制文件操作模式字符:
    'b'
  说明:
   1,默认文件中存储的都是以字节(bytes)为单位的数据,通常有认为规定的格式
   2,对二进制文件的读写操作需要用字节串进行操作
什么是二进制文件
 文件中以字节为单位存储和读写操作,不以字节串为单位进行读写的文件操作方式
读方法:
 F.read()
 对于文本文件,F.read(返回类型为字符串)
 对于二进制文件,返回类型为字节串
写方法:
  F.write(x)
 二进制模式,X必须是字节串
 文件模式,X必须是字符串

F.tell()方法
 作用:返回当前文件的读写位置(从文件头以字节为单位)
 

F.seek()方法:
 作用:
  设置文件的读写位置
 格式:
  F.seek(偏移量,whence=相对位置)
  偏移量:
    大于0的数代表向文件末尾移动
    小于0的数代表向文件头方向移动
  相对位置:
   0 代表从文件头开始偏移
   1 代表从当前读写位置进行偏移
   2 代表从文件尾开始偏移

示例:
f=open('note.txt','rb')
print('当前位置',f.tell())
b=f.read(3)
print('当前位置',f.tell())
f.seek(2,1)
print('当前位置',f.tell())
f.seek(5,0)
print('当前位置',f.tell())

F.flush方法
作用:
  清空缓冲区
 格式:
 F.flush()  将缓冲区的数据立即存入磁盘

文件操作小结:
  两种打开方式:
   文本文件方式
   二进制文件方式
 两种IO操作:(input读,output写)
  读操作:'r'
  F.read()
  F.readline()
  F.readlines()
  写操作:'w' , 'x','a'
  F.write(x)
  F.writelines(x)


汉字编码:
  国标系列:
   GB18030(收录27533个汉字,二字节或四字节编码)
     GBK(收录21003个汉字,而字节编码)
       GB2312(收录6763个汉字+682个全角字符,二字节编码)
   (windows常用)
  国际标准:
   Unicode32(32位表示的文字编码)
     Unicode16(16位表示的文字编码)
  (Linux/Mac OS X /IOS,Android常用)

  UTF-8:
    (8bit Unicode Transformation Format)

Python 编码转换字符串:
  'gb2312'
  'gbk'
  'gb18030'
  'utf-8'
  'ascii'
 用于s.encode(x) 和 b.decode(x)中

编码注释:
  在源文件的第一行或第二行写入如下内容为编码注释
  # -*- coding:gbk -*-
  或
  # -*- coding:utf-8 -*-
 作用:
  提示Python3解释执行器,当前文件的编码方式是什么
