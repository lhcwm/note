索引取值
a=l[1]
索引赋值
l[1]=10


元组　ｔｕｐｌｅ
　　元组是不可改变的序列，
　　可以存放任意类型的数据容器

元组的表示方式：
　     用（）括起来，单个元素括起来后加逗号（　，）区分单个对象还是元组
１，创建元组的字面值：
　　ｔ＝（　）
　　如：ｔ＝(200)　　　#ｔ绑定的是整数２００
　　　　 　　　　t=200 
　　　　　　　　x,y,z = (100,200,300)  # 序列赋值，不是元组
　　　　　　　　x,y,z = ‘ａｂｃ’　　＃序列赋值，不是元组　　x='a'   y='b'  z='c'

　　　　ｔ＝２００，　＃ｔ绑定的是元组，    
　　　　ｔ＝１，２，３
　　　　ｔ＝（２００，）

　　　注：ｔｙｐｅ（ｘ）可以查看ｘ的类型，是整数还是元组
２，元组的构造函数
　ｔｕｐｌｅ（）　　生成一个空元组，等同于（）
　ｔｕｐｌｅ（ｉｔｅｒａｂｌｅ）用可迭代对象生成元组
　　示例：
　　　ｔ＝ｔｕｐｌｅ（ｒａｎｇｅ（１，６））

３，元组的运算
　　　运算符：　　＋　　＋＝　　*    *=
　　　注：因为元组不可变，运算后的ＩＤ会发生变化。
４，元祖的比较
　　　运算符：<  <=   >  >=  ==  !=
　　说明：
　　　元组比较规则和列表比较规则完全相同
　ｉｎ　、　ｎｏｔ　ｉｎ

５，索引和切片

　　元组不能　索引赋值　和　切片赋值，其他等同列表。
　　 a=t[2]  可以
　　　t[2]=22  不可以

６，元组的方法只有２个：
　　　T.index(v [, begin[, end]])　　返回对应元素的索引下标, begin为开始索引，end为结束索引,当 value 不存在时触发ValueError错误

　　　T.count(x)　　返回元组中对应元素的个数

７，序列相关的函数总结
　以下函数用于：字符串／列表／元组
　len(x)  max(x)  min(x) sun(x) any(x) all(x)
 构造函数：
　str(x)  list(x)  tuple(x)
 
 reversed(x)  sorted(x)  .


字典

　是一种可变的容器
　可存储任意类型的数据
　每个数据都是用'键'（ｋｅｙ）进行索引，而不像序列可以用下标进行索引
　字典中的数据没有先后顺序，字典的存储是无序的
　数据以　键（ｋｅｙ）－值（ｖａｌｕｅ）对　的形式进行存储
　字典的键不能重复，且只能用不可变类型作为键。

１，字面值表示方法：
　｛｝括起来，以冒号　：　分隔键－值对，各键值对用逗号隔开
　　　ｄ＝｛｝　　＃空字典
　　　ｄ＝｛‘姓名’：‘张三’，‘年龄’：２０｝
　　　ｄ＝｛１：‘一’，２：‘二’｝
２，构造函数：
　　ｄｉｃｔ（ｉｔｅｒａｂｌｅ）可迭代对象创建一个字典（数据必须成对出现）
　　ｄｉｃｔ（**ｋｗａｒｇｓ）用关键字传参形式生成一个字典,(键名必须符合标识符命名规则的字符串)

　　示例：
　　  d=dict()
    l=[('姓名','张三')，['年龄'，２０],'ll']
　　　　d=dict(l)
    d=dict(name='张三'，age=20)

　键必须为不可变类型
　　可变的数据类型包括：
　　列表ｌｉｓｔ　　字典ｄｉｃｔ　　　集合ｓｅｔ　　字节数组ｂｙｔｅａｒｒａｙ

３，字典的基本操作
　１，键索引：
　　　　　用[]可以获取字典内键所对应的值
　　取值语法：
　　　　　变量＝字典[键]
　　示例：
　　　　d={'a':1,'b':2}　
   　print(d['a'])
　
　２，添加和修改字典的键值对
　　语法：
　　　　字典[键]＝表达式
　　说明：
　　　　键不存在，创建键，并绑定对应的值
　　　键存在，修改绑定的值
　　示例
　　　　　d={}
     d['name']='a'  #创建新的键值对

　３，ｄｅｌ　
　　语法：
　　　　ｄｅｌ　字典[键]
　　示例：
　　　　　　　　del d['a']  #删除字典ｄ中的‘ａ’键，同时解除对值的绑定
  
        d={}
        del d  #解除变量ｄ对字典的绑定

　４，ｉｎ　／　ｎｏｔ　ｉｎ　
　　在字典中，ｉｎ用来判断一个键是否存在于字典中，如果存在返回ｔｒｕｅ
　　示例：
　　　　　　　d={'a':1,'b':2}
       'a' in d    #ture

　　注：　ｉｎ　只判断键是否存在，不判定值是否存在

　５，字典是可迭代对象
　　　　字典只能对键进行迭代访问

　６，比较运算：　　＝＝　　　！＝
  说明：
　　　只有键和值完全相同时，才相等
　
　７，用于字典的内建函数
　　len  　键值对的个数
 　max  　键的最大值
　　min 　　键的最小值
　 sum　　　所有键的和 
　　any 　　任意一个键为真则返回ｔｒｕｅ
　　all　　　全部键为真返回ｔｒｕｅ

　８，字典方法
　　参见ｄｉｃｔ.html

 　　　D.items() 返回的是元组，（键，值）（键，值）

　９，字典推导式
　用可迭代对象依次生成字典内元素的表达式
　　语法：
　　　｛　键表达式　：　值表达式　ｆｏｒ　变量　ｉｎ　可迭代对象　ｉｆ　真值表达式　｝　
　　　　
　
字典和列表：
　　１，都是可变对象
　　２，索引方式不同，列表用整数索引，字典用键索引。
　　３，字典的插入，删除，修改的速度可能会快于列表（重要）
　　４，列表的存储是有序的，字典是无序的
　
