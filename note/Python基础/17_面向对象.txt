Python面向对象:(以对象为中心)

1,面向对象基本概念
 1,面向过程:考虑实现过程,考虑每一步如何做
   代码组织单位:函数
 2,面向对象:
  1)提出的原因:
    成本和可行性
    代码复用,提高开发效率
    软件既要保持稳定性,又要满足不断地变更
      对扩展开放,对修改封闭
    面向过程的方式,在某领域有局限性.

  2)什么是面向对象
    object orainted programming(简写OOP)
    1,关注对象,把事物看做一个一个对象,以对象为中心,把事物归纳成一个一个类
    2,提供了另一种分析/解决问题的方式
 
  优点:
   1,思想方法层面:更有利于归纳,分析.解决问题,更接近于人的思维方式
   2,技术层面:重用性:有利于代码复用,提高开发效率
              扩展性:能够方便对现有代码进行扩展可改写
              灵活性:程序设计具有更多的灵活性,弹性
  适用场景:
   面向过程:系统级软件,嵌入式
   面向对象:企业级应用,图形库,游戏

  类和对象:
   类(class):具有共同特征事物的统称,如:学生,鸟
   对象(object):类当中一个特殊的个体,特定的,具体的

  类的构成:
    属性:描述对象'有什么',数据特性
    行为:描述对象'能干什么',行为特性
    
示例:
计算椭圆的周长及面积
class ell:   #创建类
    #类中的函数,称之为方法
    def __init__(self,a,b):   #构造方法,初始化属性. self自动绑定调用该方法的对象
        self.a=a     #属性赋值, 属性名称一般与形参名称一致.
        self.b=b   
    def len(self):   #创建行为方法
        return 2*3.14*self.a+4*(self.b-self.a)
    def area(self):  #创建行为方法
        return 3.14*self.a*self.b

e = ell(2,3)    #实例化,创建类的对象.该语句执行成功后,后返回一个对象
le =e.len()     #调用类的行为
are =e.area()
print('周长:%f,面积:%f'%(le,are))

  类的定义:
  class name([父类列表]):
      '类的代码'
      #属性(一般通过__init__构造方法创建)
      方法一
      方法二
     ...
  
   说明:class     定义类的关键字
        name      类名称(一般以大写字符开头)
        父类列表  发生继承的时候,表示从哪个类继承
 面向对象编程三步曲:
  1,定义类.
     根据业务逻辑,从具体的事物中归纳,抽象出共同的属性/方法,并编写代码
  2,实例化,创建类的对象
     
  3,调用对象的行为方法,使用类所提供的功能




面向对象的三大特征:
  封装,继承,多态
  1,封装: 
      将属性/方法放到类的内部
      对象对外提供一组方法(接口),来对类的数据进行访问
      对于一个类或对象,外部主要关注功能,而不是功能实现的细节

    def __init__(self,name,color,output):
        self.name=name
        self.color=color
        self.output=output
        self.__li=0     #两个下划线开头的属性为私有属性,外部无法修改和调用

  2,继承:
   代码冗余:不同模块中相同或相似的代码
       导致的问题:
           重复劳动
           编码测试工作量大
           修改维护困难
  继承:
    1,将事物共同的特征抽象出来,定义到父类中,子类继承父类,自动获得父类的行为和属性
    2,描述事物的共同特征
    3,继承能够减少代码冗余/减少工作量,提升效率,更容易维护
  相关概念:
    父类(基类,超类)\子类(派生类)
    父类相对于子类更抽象,范围更宽泛
    子类相对于父类更具体,范围更狭小

  单继承(只有一个父类,JAVA)
  多继承(超过一个父类,Python/C++)
 
  如何实现继承:
   class 类名(父类1,父类2)
  
  继承小结:
     通过归纳\抽象,将共同的特征(属性,行为)放到父类中,子类通过继承,获得父类的行为和属性
     能够消除冗余
     能够在不改变父类代码的情况下,子类添加特有的属性和行为,子类从而实现功能扩展和变更
 方法放到类里面,属性放到对象里面
