自定义模块:
  要求:
  1,模块文件后缀名必须以.py结尾
  2,模块文件名必须是合法的标识符
  3,避免名称和内建模块的冲突
  导入方式:
  import 语句
  from import 语句
  from import * 语句
 

import语句搜索模块的路径顺序:
 1,搜索内建函数
 2,搜索程序运行时的路径(当前工作目录)
 3,搜索sys.path提供的路径
   sys.path是一个列表,里面放的都是模块的索引路径

模块化编程的优点:
 1.有利于多人合作开发
 2.是代码更加易于维护
 3.提高代码的复用率(模块可以被其他代码或者模块使用)
 4.模块化编程有助于解决变量名冲突(重名)的问题,模块内地全局变量的作用域为模块内全局

模块的加载过程
 在模块被导入时,模块的所有语句会执行
 如果一个模块已经被导入,则再次导入时不会重新执行模块内的语句
 
from 模块名 import 属性名
 它会先加载整个模块,再从模块中提取想要的属性(模块的属性就是模块内的全局变量)

模块的重新加载
 import mymod
 import imp
 imp.reload(mymod)  #重新加载mymod模块

模块被导入和执行的过程:
 1,先搜索相关路径找模块(.py)
 2,判断是否有此模块对应的.pyc文件,如果,.pyc文件比.py文件新,则直接加载.pyc文件
 3,否则用模块.py的文件生成.pyc文件并加载执行
 

        绑定
 变量  ---------> 对象
(名称)          (具体的东西)



模块的编译  compile 
mymod.py    编译  mymod.pyc   解释执行  Python3


模块的属性:
 模块的文档字符串:
    模块内第一个没有赋值给任何变量的字符串
 模块的__doc__属性
   用于绑定模块的文档字符串
 模块的__file__属性
    __file__用于绑定模块文件的路径名
   注: 内建模块没有file属性
   解释执行器内输入    模块名.__file__


vs code软件中  按住ctrl 鼠标点击模块名   就可以直接访问模块源代码了

 模块的__name__属性
   __name__属性用来记录模块自身的名字

 作用:
  1,记录模块名
  2,用来判断是否为主模块
 说明:
  1,当此模块作为主模块时(也就是第一个运行的模块)运行时,__name__绑定'__main__'
  2,当此模块不是主模块,而是被其他模块导入的,则__name__绑定模块名

 模块的__all__列表:

      是一个用来存放可导入属性的字符串列表
   作用:
       当用from xxx import * 导入时,只导入__all__列表内的属性
   使用:
       在模块中定义: __all__ =['属性1','属性2']

   注: __all__列表只能影响from import *语句,其他语句不受影响

 模块的隐藏属性:
      模块中以_开头的属性,在from import *导入时将不会被导入,通常称为隐藏属性
   作用:
      限制from import *语句,不导入隐藏属性

  示例: 
def f1()
    pass
def _f2()
    pass

name1=99
_name2=88

 随机模块random
  作用:
    用于模拟随机输出
 


包(模块包)package
  定义:将模块以文件夹的组织形式进行分组管理的方法
  作用:
       将一系列模块进行分类管理,有利于防止命名冲突
       可以在需要时加载一个或部分模块,而不是全部模块

 包(模块(函数(语句)))

包的导入规则:
  同模块的导入规则:
  import 包名[as 模块新名]
  import 包名.模块名 [as 模块新名]
  import 包名.子包名.模块名 [as 模块新名]
 
  from 包名 import 模块名 [as 模块新名]
  from 包名.子包名 import 模块名 [as 模块新名]
  from 包名.子包名.模块名 import 属性名 [as 属性新名]

  from 包名 import*
  from 包名.模块名 import*

包的搜索路径顺序:
   1,搜索程序运行时的路径(当前工作路径)
   2,sys.path提供的路径


包的__init__.py文件
 是常规包内必须存在的文件
 会在包加载时自动调用
 作用:
  编写此包的内容
  在内部填写包的文档字符串
  可以填写函数

__init__.py内的__all__列表

作用:
 用来记录此包中有哪些子包或模块需要导入
 当用from 包 import *语句导入模块时,只查找__all__中的所有模块或子包
说明:
 __all__只在from 包 import *语句起作用
 

包的相对导入:
     指包内模块的相互导入
 语法
    from 相对路径包或模块 import 属性或者模块名
    或
    from 相对路径包或模块 import*
相对路径:
    在from import语句 和 from import *语句中可以使用相对导入
    在from 和 import 间可以用相对路径
    .  代表当前目录
   ..  代表上一级目录
   ... 代表上两级目录
 注: 相对导入时不能超出包的外部

