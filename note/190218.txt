一,基于poll方法的IO多路复用
  1.p=select.poll()
    功能:创建poll对象
    返回值:poll对象

  2.p.register(fd,event)
    功能:注册关注的IO事件
    参数:fd  要关注的IO
        event 要关注的IO事件类型

    常用event类型:
    pollin  读IO事件(rlist)
    pollout 写IO事件(wlist)
    pollerr 异常io (xlist)
    pollhup 断开连接
    
    示例:p.register(sockfd,pollin|pollerr)

  3.unregister(fd)
    功能:取消对IO的关注
    参数:IO对象或IO对象的fileno

  4.events=p.poll()
    功能:阻塞等待监控的IO事件发生
    返回值:返回发生的IO
          events格式 [(fileno,event),()....]
          每个元组为一个就绪的IO,元组第一项是该IO的fileno,
          第二项为该IO就绪事件的类型
    需要通过fileno寻找对应的IO对象,建立对应字典确保字典中的IO和关注的IO时刻保持一致
        字典格式:{fileno:io_obj}

  5.poll_server步骤:
    1,创建套接字
    2,将套接字register
    3,创建查找字典,并维护
    4,循环监控IO发生
    5,处理发生的IO

二,基于epoll方法的IO多路复用
  使用方法:基本与poll相同
    生成对象改成epoll()
    将所有的事件对象改为EPOLL类型

  epoll特点:
   1,epoll效率比select poll要高
   2,epoll(由内核空间大小决定)监控IO数量比select  poll (1024个)要多
   3,epoll的触发方式比poll要多(EPOLLET边缘触发)

三,struct模块的使用
  1.原理:将一组简单数据进行打包转换为bytes格式发送
        或者将一组bytes格式数据,进行解析
  2.接口使用:
    1,struct(fmt)
      功能:生成结构化对象
      参数:fmt 定制的数据结构
      示例: 要发送的数据 1  b'abcd'  1.75
           fmt参数  'i4sf'

    2,st.pack(v1,v2,v3...)
      功能:将一组数据按照指定格式打包转换为bytes
      参数:要打包的数据
      返回值:bytes字节串

    3.st.unpack(bytes_data)
      功能:将bytes字节串按照指定的格式解析  格式需双方约定好
      参数:要解析的字节串
      返回值:解析后的内容

      示例:#发送
          import struck
          st=struck.struck('i4sf')
          data=st.pack(1,b'abcd',1.75)
          #解析
          import struck
          st=struck.struck('i4sf')
          data1=st.unpack(data)
    4,struct.pack(fmt,v1,v2...)
      struct.unpack(fmt,bytes_data)
      说明:可以使用struct模块直接调用pack unpack
      此时两个函数第一个参数传入fmt.其他用法功能相同


四,本地套接字
  1,功能:用于本地两个程序之间进行数据的收发
  2,套接字文件:用于本地套接字之间通讯时,进行数据传输的介质
  3,创建本地套接字的流程:
    1,创建本地套接字
      sockfd=socket(AF_UNIX,SOCK_STREAM)
    2,绑定本地套接字文件
      sockfd.bind(file)
    3,监听,接受客户端连接,消息收发
      listen()   accept()   recv() send()
    4,关闭套接字

cookie:linux 下文件类型
       b:块设备文件(驱动)
       c:字符设备文件
       d:目录
       -:普通文件
       l:链接文件
       s:套接字文件
       p:管道文件



五,多任务编程
  1,意义:充分利用计算机的多核资源,他搞程序的运行效率
  2,实现方案:多进程,多线程
  3,并行,并发概念:
    并发:同时处理多个任务,内核在任务间不断切换达到好像多个任务被同时执行的效果,
        实际每个时刻只有一个任务占有内核
    并行:多个任务利用计算机多核资源在同时执行,此时多个任务间为并行关系

六,进程:(process)
  1,定义:程序在计算机中的一次运行
     程序是一个可执行的文件,是静态的占有磁盘
     进程是一个动态的过程描述,占有计算机运行资源,有一定的生命周期
  2,如何产生一个进程
    1,用户空间通过调用程序接口或命令发起请求
    2,操作系统接受用户请求,开始创建进程
    3,操作系统调配计算机资源,确定进程状态等
    4,操作系统将创建的进程提供给用户使用

  3,进程概念:
    CPU的时间片:如果一个进程占有cpu内核,则这个进程在CPU时间片上

    pcb(进程控制块):在内存中开辟的一块空间,用于存放进程的基本信息,
                  也用于系统查找识别进程

    进程ID(PID):系统为每个进程分配的一个大于零的整数,作为进程的ID.
               每个ID是不能重复的
        Linux查看进程ID:ps -aux
    
    父子进程:系统中每一个进程(除了系统初始化进程)都有唯一的父进程,
            可以有0个或多个子进程.父子进程关系便于进程管理
        查看进程树:pstree
 
    进程状态:
       三态:
           就绪态:进程具备执行条件,等待分配cpu资源
           运行态:进程占有CPU时间片正在运行
           等待态:进程暂时停止运行,让出CPU
       五态:
           新建态:创建一个进程,获取资源的过程
           终止态:进程结束,释放资源的过程
      状态查看命令:ps -aux   -->stat列
        S  等待态
        R  运行态或就绪态
        D  等待态
        T  等待态
        Z  僵尸

        <  有较高优先级
        N  优先级较低
        +  前台进程
        s  会话组组长
        l  有多线程的

面试要求:1,什么是进程,进程和程序有什么区别
        2,进程有哪些状态,状态之间如何转化

作业:1.对要求问题总结回答
    2.整理网络编程重点程序,能够自己写出 
      tcp服务程序  udp服务程序  select服务程序
      poll服务程序
    3,复习类的使用