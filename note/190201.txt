1,数据的导入与导出
  1,导出:
    格式:select 查询语句 into outfile '导出的文件名称'  -- 文件名不能存在 
        fields terminated by '字段分隔符' 
        lines terminated by '行分隔符'

    示例:    
    第一步:查看secure_file_priv变量值
    show variables like 'secure_file%';
    -- 复制路径 /var/lib/mysql-files/
    第二步:执行导出
    select * from acct into outfile
    '/var/lib/mysql-files/acct2.csv'
    fields terminated by ',' 
    lines terminated by '\n';
    第三步:查看导出结果(Linux命令行中执行)
    sudo cat /var/lib/mysql-files/acct.csv

  2,导入:
    格式:
    load data infile '文件路径'
    into table 表名
    fileds terminated by '字符分隔符'
    lines terminated by '行分隔符';

    示例:
    load data infile '/var/lib/mysql-files/acct2.csv'
    into table acct_new
    fileds terminated by ','
    lines terminated by '\n';

2,子查询(重点)
 1,定义:一个查询语句中嵌套了另一个查询,也叫嵌套查询.例如
  select * from acct
  where cust_no in   -- 外层查询
  (select cust_no from customer 
    where status =1)    -- 子查询
 2,说明:
   括号中的部分成为子查询
   子查询返回一个集合
   子查询的结果要和条件他求匹配
   先执行子查询,在执行外层查询
   子查询只执行一遍
   select * from 表(这里也可以是子查询)
 3,使用子查询的情况:一个查询语句无法实现或实现不方便,使用子查询
   单表子查询:子查询,外部查询是一个表
   语法:select 字段列表 from 表A where 条件(select 字段列表 from 表A)
   示例:查询账户中,余额大于平均余额的账户
   select * from acct where balance>
   (select avg(balance) from acct);

   多表子查询:子查询/外层查询非同一个表
   语法:
   select 字段列表 from 表A where条件
   (select 字段列表 from 表B where 条件)
   示例:
   select * from acct where acct_no in
   (select acct_no from acct_trans_detail)

3,连接查询(联合查询)(难点!!!)
  1,定义:
    将两个(或以上)的表连接起来,得到一个查询结果(一个表)
  2,使用情景:
    当从一个表中无法查询到想要的全部数据时使用
    (前提是多表之间有关联关系)
  3,格式:
    select 字段列表 from 表A,表B 
    where 表A.字段=表B.字段 -- 如果关联不正确,会产生笛卡尔积

    select a.acct_name,b.amt from acct a,acct_trans_detail b
      where a.acct_no=b.acct_no;  -- 默认内连接

  4,笛卡尔积:
    定义:两个集合的乘积,表示用集合中的元素两两组合,产生新的集合
    意义:表示两个集合所有组合的可能性
    如:
      A集合表示学生,B集合表示课程
      A*B表示所有学生选课的可能组合
      
      A集合表示所有声母,B集合表示说有韵母
      A*B表示所有发音的可能组合
    笛卡尔积和关系:
      笛卡尔积中包含不存在/无意义的组合,将这部分组合排除,就得到关系(二维表)
      
  5,连接的分类:
   1,内连接:
     没有匹配到的记录不显示
     格式:select 字段列表 from 表A inner join 表B on 关联条件
     示例:
     查询账户,户名,交易日期,交易金额
     select a.acct_no,a.acct_name,b.trans_date,b.amt
     from acct a inner join acct_trans_detail b
     on a.acct_no=b.acct_no;
   2,外连接:
     分为左连接,右连接.
     左连接:左表为主(第一个表),左表的数据全部显示,右表的数据取匹配.
           如果匹配到,将右表字段的值连接在后面,如果没有匹配到,则填null
     格式:
     select 字段列表 from 表A left join 表B on 关联条件
     示例:
     select a.acct_no,a.acct_name,b.trans_date,b.amt 
     from acct a left join acct_trans_detail b 
     on a.acct_no=b.acct_no;
     右连接:
     右表为主(第二个表)
     格式:
     select 字段列表 from 表A right join 表B on 关联条件

4,权限管理:
  1,权限:用户可以进行那些操作
  2,分类:
    用户类:创建/删除用户,给用户授权
    库/表操作:创建库/删除库,创建/删除/修改表
    数据操作:增删改查
  3,权限用户分类:
    root:最高权限用户,可以执行所有操作.
    大权限用户:可以执行数据库大部分操作
    小权限用户:只能查询
  4,权限表:mysql中存放权限设置的表
    user表:最重要的权限表,记录允许连接到服务器的账号,权限信息
    db表:记录授权库的信息
    table_priv表:记录授权表的信息
    columns_priv表:记录授权字段的信息
  5,如何授权
    语法:grant 权限列表 on 库名/表名
         to '用户名'@'客户端地址'
         [identified by '密码']
         [with grant option]
    说明:
    权限列表:用户可以执行的操作
            all privileges:所有权限
            select :表示select单个权限
            select,update,delete,...:分别指定权限
    库名.表名
    *.*表示所有库下所有表
    bank.acct 表示bank库下的acct表
    bank.*  表示bank库下的所有表
    客户端地址:
    %           表示所有客户端
    localhost   表示本机
    192.168.0.5 表示指定IP地址的机器
    [with grant option] 对其他用户授权权限

    示例:
    对tom用户授权,能对所有库所有表进行查询,限定只能从本机登录
    并将密码设置为'123456'
    grant select on *.* to 'Tom'@'localhost' 
    identified by '123456';
    Flush PRIVILEGES; -- 刷新权限并生效
    重新用Tom登录执行操作.
 
    select * from mysql.user where user='用户名'\G; -- 查询创建用户权限


    grant select,update,delete,insert on bank.* to 'Jason'@'%'
    identified by '123456';