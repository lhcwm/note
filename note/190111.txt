实参：
　函数的参数传递：（把数据给函数）
　传递方式：（两大类，四小种）
　　１，位置传参：
　　　　　序列传参
　　２，关键字传参：
　　　　　字典关键字传参

　位置传参：
　　实际参数的对应关系与形式参数的对应关系是按位置依次对应的。　
　　说明：实参与形参通过位置进行传递与匹配
　　　　　实参的个数必须与形参的个数一致
　序列传参：
　　用*将序列(列表，字符串，元组)拆解后按位置进行传递的
　　　调用时：　函数名（*l）
　　说明：
　　序列传参时，序列拆解的位置将与形参一一对应。

　关键字传参：
　　按着形参的名称给形参赋值，实参与形参按名称进行复制
　　说明：实参与形参按形参名进行匹配，可以不按位置进行匹配。
　　例：
　　　调用时：　函数名（c=1,a=2,c=3）＃在调用的时候直接给形参名称赋值。
　　　　　　　　　　　　　　　　　　　　每个形参必须赋值，不能多不能少。

　字典关键字传参：
　　实参为字典，将字典用**拆解后进行关键字传递参数
　　说明：　字典的键名和形参名必须完全一致（不能多不能少）
　　　　　　字典的键名必须为符合标识符命名规则的字符串
　　　　　　字典的键名要在形参中存在
  　示例：
　　调用时　函数名（**d1）　

函数的综合参数：
　１，函数的传参方式，在能确定形参能唯一匹配到相应实参的情况下可以任意组合
　２，函数的位置传参要先于关键字传参

可变和不可变类型的容器作为实参传递的区别：
　　可变类型的实参：传递时，在函数内部可以改变容器内的数据
　　示例：ｌ＝[1,2,3,4]
          t=(5,6,7,8)
          def ap(s):
            x.append(5)
          ap(l)
          print(l)  #[1,2,3,4,5]

------------------
形参：
函数的缺省参数：
　　语法：
　　　　ｄｅｆ　函数名（形参名１＝默认实参１，形参名２＝默认实参２，....）：
　　说明：
　　　缺省参数必须自右至左依次存在，如果一个参数有缺省参数，则其他右侧的所有参数都必须有缺省参数　　
　　缺省参数可以有０个，或多个，甚至全部都是缺省参数。

函数的形参：
　１，位置形参：
　２，星号元组形参
　３，命名关键字形参：
　４，双星号形参

　１，位置形参：
　　ｄｅｆ　函数名（形参名１，形参名２．..）
           语句块
　２，星号元组形参：
　　ｄｅｆ　函数名（*元组形参名）
 
     def name(*args)
　作用：
　　　收集多余的位置参数
　说明：　在一个函数定义中元组形参名最多只能有一个，一般命名为‘ａｒｇｓ’
　３，命名关键字形参
　ｄｅｆ　函数名（*,命名关键字形参１，命名关键字形参２....）
　或
　　ｄｅｆ　函数名（*ａｒｇｓ,命名关键字形参１，命名关键字形参２....）
　作用：
　　强制所有的参数都必须用关键字传参或字典关键字传参
　格式：
　　　def name(a,b,*,c,d)  ＃*号后必须为关键字传参

　４，双星号字典形参：
　ｄｅｆ　函数名（**字典形参名）
　作用：
　　收集多余的关键字形参
　说明：
　　一般命名为‘ｋｗａｒｇｅ’
　　一个函数内，字典形参最多只能有一个。
　def name(**kwargs)

       kwargs得到的是字典

函数的参数说明：
　位置形参，缺省参数，星号元组形参，双星号字典新参可以混合使用

函数参数自左至右的顺序为:
 位置形参
　星号元组形参
　命名关键字形参
　双星号字典形参
示例：
　　def fn(a,b=2,*args,c=30,4=40,**kwargs)


全局变量　和局部变量
局部变量：
　　定义在函数内部的变量成为局部变量
　　只能在函数内调用
　　局部变量只有在函数调用时才会被创建，在函数调用后会自动销毁
　　当有同名全局变量和局部变量时，优先访问局部变量
　全局变量：(全局变量在编程中做到越少越好)
　　定义在函数外部，模块内部的变量成为全局变量
　　所有函数都可以直接访问（但函数内不能直接赋值）
　局部变量说明：
　　在函数内部赋值语句不会对全局变量造成影响
　　局部变量只能在被声明的函数内访问，全局变量可在整个模块范围内访问

ｇｌｏｂａｌｓ　和ｌｏｃａｌｓ函数
　　ｇｌｏｂａｌｓ（）返回当前全局变量的字典
　　ｌｏｃａｌｓ（）返回所在函数内变量的字典
