    <数据结构>
  5,共享内存
    1,通讯原理:在内存中开辟一块空间,进程可以写入内容和读取内容完成通讯,
              当时每次写入的内容会覆盖之前的内容
    2,实现方法:
      from multiprocessing import Value,Array
    
      obj=Value(ctype,data)
      功能:开辟共享内存
      参数:ctype  表示共享内存空间类型'i'  'f'  'c'
          data  共享内存空间初始数据
      返回值:共享内存对象

      obj.value  对该属性的修改查看即对共享内存的读写

      obj.Array(ctype,data)
      功能:开辟共享内存空间
      参数:ctype  表示共享内存数据类型
          data   整数,表示开辟空间的大小
                 其他数据表示开辟空间存放的初始化数据
      返回值:共享内存对象

      Array共享内容的读写:
        通过遍历obj可以得到每个值,直接可以通过索引序号修改任意值.

      注:可以使用obj.value直接打印共享内容中的字节串

  6,信号量(信号灯集)
    1,通讯原理
      给定一个数量对多个进程可见.多个进程都可以操作该数量增减,并根据数量值决定自己的行为

    2,实现方法:
      from multiprocessing import Semaphore
      sem=Semaphore(num)
      功能:创建信号量对象
      参数:信号量的初始值
      返回值:信号量对象

      sem.acquire() 将信号量减1  当信号量为0时阻塞
      sem.release() 将信号量加1  
      sem.get_value()  获取信号量数量

补充:当在父进程中创建   套接字, 进程间通讯对象, 文件对象,
    子进程从父进程获取的这些对象时,那么对对象的操作会有属性
    的相互关联影响,如果在各自进程中单独创建这些对象,则各自互不影响

二,线程编程(thread)
  1,什么是线程:
    ①线程被称为轻量级的进程
    ②线程也可以使用计算机的多核资源,是多任务编程方式
    ③线程是系统分配内核的最小单元
    ④线程可以理解为进程的分支任务
  
  2,线程特征:
    1,一个进程中可以包括多个线程
    2,线程也是一个运行行为,消耗计算机资源
    3,一个进程中的所有线程共享这个进程的资源
    4,多个线程之间的运行互不影响各自运行
    5,线程的创建和销毁消耗的资源远小于进程
    6,各个线程也有自己的id等特征

  3,threading创建线程
    1,创建线程对象
      from threading import Thread
      t=Thread()
      功能:创建线程对象
      参数:target  绑定线程函数
          args   元组,给线程函数传参
          kwargs  字典,给线程函数键值传参

    2,启动线程
      t.start()

    3,回收线程
      t.join([timeout])

  4,线程对象属性
    t.name 线程名称
    t.setName()  设置线程名称
    t.getName()  获取线程名称

    t.is_alive()  查看线程是否在生命周期

    t.daemon   设置主线程和分支线程的退出关系
    t.setDaemon()  设置daemon的属性值
    t.isDaemon()  查看daemon的属性值

    daemon为True时,主线程退出分支线程也退出,要在start前设置,通常不和join一起使用

  5,自定义线程类
    1,创建步骤:
      1,继承Thread类
      2,重写__init__方法,添加自己的属性,使用super加载父类属性
      3,重写run方法
    2,使用方法:
      1,实例化对象
      2,调用start自动执行run方法
      3,调用join回收线程

三,线程通讯:
  1,通讯方法:线程间使用全局变量进行通讯
  2,共享资源争夺:
    1,共享资源:多个进程或者线程都可以操作的资源,称为共享资源
             对共享资源的操作代码段称为临界区
    2,影响:对共享资源的无序操作可能会带来数据的混乱或者操作错误
          此时往往需要同步互斥机制协调操作顺序
  3,同步互斥机制
    同步:同步是一种协作关系,为完成操作,多进程或者线程间形成一种协调,
        按照必要的步骤有序执行操作
    互斥:是一种制约关系,当一个进程或者线程占有资源时会进行加锁处理,
        此时其他进程或线程就无法操作该资源,直到解锁才能操作

  4,线程同步互斥方法
    1,线程Event
      from threading import Event
      e= Event()  #创建线程event对象
      e.wait([timeout]) 阻塞等待e被set
      e.set()  设置e,使wait结束阻塞
      e.clear()  使e回到未被设置的状态
      e.is_set()  查看当前e是否被设置
    
    2,线程锁 Lock
      from threading import Lock
      lock=Lock()  创建所对象
      lock.acquire()  上锁  如果已经上锁了,在调用会阻塞
      lock.release()  解锁

      with lock:  上锁
        ...
        ...
           with代码块结束后自动解锁

作业:1,对比进程线程的区别
    2,做单进程,多进程,多线程的效率测试
    
