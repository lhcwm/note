1,类属性和类方法:
  1,类属性(类变量)
     属于类,而不是对象
     可以通过类访问,也可以通过对象访问
     calssName.attribute  通过类访问
     objectName.attribute 通过对象访问
     定义:在类的所有方法之外定义
     特征:类变量为所有实例所共享

  class Chain:
    #类属性
    store_num=0   #门店数量
    total_income=0  #所有门店总营业额
    store_list=[]   #所有门店对象列表

    def __init__():


  
  2,类方法:属于类而不属于对象
    定义方式:需要在方法前加@classmethod装饰器
    特征:第一个参数不是self,而是cls
         绑定调用该方法的类
         类方法不能访问对象的属性,只能访问类属性
    访问:类.方法(),或 对象.方法()
  示例:
    @classmethod
    def print_t(cls):
        print('门店数量:%d'%cls.store_num)
        for x in cls.store_list:
            print(str(x))

 3,静态方法:
   主要处理一些逻辑,跟类有一定的相关性,跟类没有数据交互(不操作类的属性)
   定义静态方法:
     通过@staticmethod装饰器进行定义,不需要传入self和cls
   调用:可以通过类或对象进行调用
   意义:对一些独立的功能或操作进行归类存放
  示例:
    @staticmethod
    def print_r():
        r='管理条例'
        print(r)

 4,类的预置属性:
   1,__slots__属性
    作用:用来限定属性的范围,实例化对象时,不允许对象设置__slots__限定外的属性
         从而防止因属性填写错误(填写错误会创建一个新属性)导致的程序错误
    类型:允许的属性名称(字符串)构成的列表
         含有__slots__属性的类创建的对象,没有__dict__内置属性

   2,__doc__属性
    作用:绑定类中第一个没有赋值的字符串
         可以通过help函数进行查看.__doc__属性主要存放类的描述信息
    查看:进入交互模式,执行
         from 模块名 import*
         help(类名)

 5,类的关系设计:
   1,继承关系:
     描述子类/父类之间的关系,子类是一个(种)父类 的关系
      如: 麻雀 是一种 鸟
   2,组合关系
     一个对象中嵌入了另一个对象
     描述了'有一个'的关系,整体包含部分的关系
     如: 店 里有一名 员工
   3,关联关系
     一个类中嵌套了另一个类,但是两个类是平等关系,而不是局部和整体关系
     关联可以是单向也可以是双向

 6,with语句
   1,作用:在访问某些资源时,不管有没有发生异常,都确保能够执行必须的清理操作,并释放资源,(类似于try-finally作用)
   try:
      with open('saf','rt') as f: #不管操作是否发生异常,都能保证文件正确关闭
         for x in f:
            print(x)
   except:
      print('文件操作失败')
  2,语法:
    with 表达式1 [as 变量1][,表达式2 [as 变量2]]:
       语句块
    例如:文件打开后自动关闭
         线程资源的释放
  3,实现原理:环境资源管理器(上下文管理器)
    定义了__enter__()和__exit__()方法的对象称为环境资源管理器
    调用时机:__enter__方法在with语句被执行调用,__exit__()方法在with语句结束时被调用
    格式:
    __enter__(self)
    __exit__(self,exc_type,exc_val,exc_tb)
   参数:exc_type:  异常的类型,没有异常为None
        exc_val:绑定错误对象,没有异常为None
        exc_tb:绑定TrackBack对象,没有异常为None
