正则表达式:

  一,动机:
    1,文本处理已经成为计算机常见工作之一
    2,对 文本内容 搜索,定位,提取 逻辑比较复杂的工作
    3,为了快速方便的解决上述问题,产生了正则表达式技术
  二,简介
    定义:即文本的高级匹配模式,提供搜索,替换等功能.
        其本质是一系列由字符和特殊符号构成的字串,这个字串即正则表达式

    匹配原理:通过普通字符和有特定含义的字符,来组成字符串,用以描述一定的字符串规则
           比如,重复,位置等,来表达一种特定类型的字符串,进而匹配
    
    目标:1.熟练掌握正则表达式符号
        2.能够读懂常用正则表达式,编辑基本表达式匹配内容
        3.能够熟练使用re模块操作正则表达式

  三,元字符的使用:
    1,普通字符:
      匹配规则:每个普通字符匹配其对应的字符
      例:>>> re.findall('ab','age18,19aba')
        ['ab']
      注:正则表达式也可以匹配中文
    2,或
      元字符: |
      匹配规则:匹配数线两侧任意规则即可
      例:>>> re.findall('成都|ab','age1成都成8,19aba')
        ['成都', 'ab']
    3,匹配开始位置
      元字符: ^
      匹配规则:匹配目标字符串的开始位置
      例:>>> re.findall('^Jame','hi,Jame')
        []
        >>> re.findall('^Jame','Jame,hello')
        ['Jame']
    4,匹配结束位置
      与字符: $
      规则:匹配目标字符串的结束位置
      例:>>> re.findall('Jame$','Jame,hello')
        []
        >>> re.findall('Jame$','hi,Jame')
        ['Jame']
      注:^和$必然是出现在正则表达式的开始和结尾,
        如果两者同时出现则表示正则表达式要匹配的目标字符串的全部内容
    5,匹配任意字符
      元字符: .
      规则:匹配除换行外的任意一个字符
      例:>>> re.findall('Jame.','hi,Jame,James')
        ['Jame,', 'James']
    6,匹配字符集中字符
      元字符:[字符集]
      匹配规则:匹配字符集中任意一个字符
      表达形式:[abc嘎]  -->任意一个[]中字符,a,b,c,嘎
              [0-9][A-Z][a-z]  -->区间内的任意一个字符
              [_#%a-z0-9]-->混合书写,一般区间在后, _,#,%,a-z,0-9
      例:
        >>> re.findall('[A-Z]i','hi,Hi,Jame')
        ['Hi']
        >>> re.findall('[hi]','hi,Jame,James')
        ['h', 'i']
        >>> re.findall('[13579]','12323')
        ['1', '3', '3']
    7,匹配字符集反集
      元字符:[^...]
      匹配规则:匹配除了字符集中的任意一个字符
      例:
        >>> re.findall('[^13579]','12323')
        ['2', '2']
        >>> re.findall('^[^13579]','2323')
        ['2']
    8,匹配重复
      元字符: *
      规则:匹配前面的字符出现0次或者多次
      例:>>> re.findall('ab*','abbbcbbba')
        ['abbb', 'a']
        >>> re.findall('b*','abbbcbbba')
        ['', 'bbb', '', 'bbb', '', '']   匹配不到会返回空
      注:ab*当表达b出现0次时是a,而不是ab.*与前面的字符作为一个整体表达
    9,匹配重复
      元字符: +
      规则:匹配前面的字符出现1次或多次
      例:>>> re.findall('ab+','abbbcbbba')
        ['abbb']
        >>> re.findall('[A-Z][-_A-Za-z0-9]*','Hi,This is 啦啦啦')
        ['Hi', 'This']
    10,匹配重复
      与字符: ?
      规则:匹配前面的字符出现0次或1次
      例:>>> re.findall('https?','http,https')
        ['http', 'https']
        >>> re.findall('[0-9]+\.?[0-9]*','13 year old,1.75,68.2kg')
        ['13', '1.75', '68.2']
    11,匹配重复
      元字符: {n}
      规则:匹配前面的字符出现n次
      例:>>> re.findall('[0-9]{3}','100,12345,678954')
        ['100', '123', '678', '954']
    12,匹配重复
      元字符:{m,n}
      规则:匹配前面字符出现m-n次
      例:>>> re.findall('[_0-9a-zA-Z]{6,8}','12SDe_rr22')
        ['12SDe_rr']
    
    13,匹配任意(非)数字字符
      元字符:\d  \D
      规则:\d 匹配任意数字字符  [0-9]
          \D 匹配任意非数字字符  [^0-9]
      例:>>> re.findall('\d','17716512323')
        ['1', '7', '7', '1', '6', '5', '1', '2', '3', '2', '3']
        >>> re.findall('\d{11}','17716512323')
        ['17716512323']
        
        >>> re.findall('\D+','No.1,port#6789')
        ['No.', ',port#']
    14,匹配(非)普通字符
      元字符:\w  \W
      规则:\w 匹配普通字符
          \W 匹配非普通字符
      说明:普通字符是指 数字 字母 下划线 和 普通汉字
      例:>>> re.findall('\w+','PORT_1110,Error 404%,下贱')
        ['PORT_1110', 'Error', '404', '下贱']
        >>> re.findall('\W+','PORT_1110,Error 404%,下贱')
        [',', ' ', '%,']
    15,匹配(非)空字符
      元字符:\s  \S
      规则:\s  匹配任意一个空字符
          \S  匹配任意一个非空字符
      说明: 空字符指 空格 \r \n \t \v \f 字符
      例:>>> re.findall('\w+\s+\w+','hello world')
        ['hello world']

        >>> re.findall('\S','hello world')
        ['h', 'e', 'l', 'l', 'o', 'w', 'o', 'r', 'l', 'd']
        >>> re.findall('\S+','hello world')
        ['hello', 'world']
    16,匹配字符串开头结尾位置
      元字符:\A  \Z
      规则:\A  匹配字符串开头位置  ^
          \Z  匹配字符串结尾位置  $
    17,匹配(非)单词边界
      元字符:\b  \B
      规则:\b  匹配单词边界位置
          \B  匹配非单词边界位置
      说明:边界位置  指数字 字母 下划线 或 汉字 和其他字符的交接位置.
      例:>>> re.findall(r'\bis\b','This is a test')
        ['is']

总结:
    1,匹配单个字符:
        普通字符
        .         任意 
        [字符集]   字符集
        [^...]    字符集反集
        \d  \D    数字     非数字
        \w  \W    普通字符  非普通字符
        \s  \S    空       非空

    2,匹配重复:
        *         0-多次
        +         1-多次
        ?         0或1次
        {n}       n次
        {m,n}     m-n次

    3,匹配位置:
        ^  \A     匹配开始位置  
        $  \Z     匹配结束位置
        \b  \B    匹配(非)单词边界  

    4,其他:
        |         或 
        ()        分组
        \         转义
四,正则表达式转义
  1,特殊符号: . * + ? ^ $ [] () {} | \
  2,如果在正则表达式中匹配特殊字符,则需要加转义
    例: >>> re.findall('\d+\.\d+','1.23')
        ['1.23']
  3,raw字符串的使用
    Python字符串-->正则  --> 目标字符串
    '\\$\\d+'    \$\d+     '$100'
     r'\$\d+'
    为了避免特殊字符在字符串中使用时转义的麻烦,
    经常使用raw字符串表达正则表达式.

五,贪婪 与 非贪婪
  贪婪模式:正则表达式的重复匹配总是尽可能向后匹配更多的内容.
  如: *  +  ?  {m,n}

  非贪婪(懒惰)模式:满足重复条件即不向后匹配更多内容

  贪婪>>非贪婪:*?  +?  ??  {m,n}?
  例:
    >>> re.findall(r'a.*b','acdb,adfb,areb')
    ['acdb,adfb,areb']
    
    >>> re.findall(r'a.*?b','acdb,adfb,areb')
    ['acdb', 'adfb', 'areb']

六,正则表达式分组
  定义:使用()可以为正则表达式建立内部分组,子组,=是正则表达式的一个内部整体
  作用:1,可以被作为整体操作,改变某些元字符操作对象
        >>> re.search(r'(ad)+','adadadadadadad').group()
        'adadadadadadad'
      2,可以单独获取匹配内容中子组对应内容
        >>> re.search(r'(ad)+','adadadadadadad').group(1)
        'ad'
  子组命名:(捕获组)
     格式:(?P<name>pattern)
        >>> re.search(r'(?P<pig>ad)+','adadadadadadad').group()
        'adadadadadadad'
     作用:名称可以表达一定的含义,也可以通过名称获取组内容
  注意:1,一个正则表达式中可以有多个子组
      2,子组的作用前提是正则表达式能够匹配到内容
      3,子组一般从外到内,从左到右计数
      4,子组不要重叠也不要过多嵌套

七,正则表达式匹配原则
  1,正确性,能够正确的匹配出目标字符串
  2,排他性,除了匹配内容,尽可能的不会匹配到其他内容
  3,全面性,尽可能对目标字符串考虑全面,做到不遗漏

八,Python  re模块使用
  1,regex=compile(pattern,flags=0)
    功能:生成正则表达式对象
    参数:pattern  正则表达式
        flags  功能标识,扩展正则匹配功能
    返回值:正则对象

  2,re.findall(pattern,string,flags=0)
    功能:通过正则表达式匹配目标字符串内容
    参数:pattern 正则表达式
        string  目标字符串
    返回值:返回匹配到的内容列表,如果正则表达式存在子组则只返回子组的内容

    regex.findall(string,pos,endpos)
    功能:通过正则表达式匹配目标字符串内容
    参数:string  表示目标字符串
        pos     截取字符串开始位置,默认表示字符串开头
        endpos  截取字符串末尾位置,默认为字符串结尾
    返回值:返回匹配到的内容列表,如果正则表达式存在子组则只返回子组的内容
    例: >>> regx=re.compile(r'ab')
        >>> regx.findall('abcdabcde')
        ['ab', 'ab']
        >>> regx.findall('abcdabcde',0,5)
        ['ab']

  3.re.split(pattern,string,flags=0)
    功能:使用正则表达式匹配内容切割字符串
    参数:pattern  正则
        string  目标字符串
    返回值:切割后的字符串列表
    例:l=re.split(r'\s+','hello world nihao   china')
       print(l)
       ['hello', 'world', 'nihao', 'china']

  4,re.sub(pattern,replace,string,max,flags)
    功能:使用指定字符串替换正则表达式匹配内容
    参数:pattern  正则
        replace  指定字符串
        string   目标字符串
        max      最多替换几处,默认全部替换
    返回值:替换后的字符串
    例:s=re.sub(r'垃圾','**','张三垃圾垃圾垃圾',2)
       print(s)
       张三****垃圾
    
    re.subn() 
    功能参数同上,只是返回值多一个替换个数

  5.re.finditer(pattern,string,flags=0)
    功能:使用正则表达式匹配目标内容
    参数:pattern  正则
        string   目标字符串
    返回值:迭代对象
    例:pattern=r'\d+'
       s='2018年4月28日'
       it=re.finditer(pattern,s)
       for x in it:
       print(x.group())  #取出match对象匹配内容

  6.re.fullmatch(pattern,string,flags=0)
    功能:完全匹配某个目标字符串
    参数:pattern  正则
        string  目标字符串
    返回值:匹配内容match object  没有匹配到内容返回None

  7,re.match(pattern,string,flags=0)
    功能:匹配某个目标字符串开始位置
    参数:pattern  正则
        string  目标字符串
    返回值:匹配内容match object  没有匹配到内容返回None
    例:obj=re.match(r'[A-Z]\w+','Hello World')
       print(obj.group())
       Hello

  8.re.search(pattern,string,flags=0)
    功能:匹配目标字符串第一个符合内容
    参数:pattern  正则
        string  目标字符串
    返回值:匹配内容match object  没有匹配到内容返回None
    例:obj=re.search(r'\d+','1231nian231')
       print(obj.group())
       1231

  9,compile对象属性
    ①flags  表示flags值,默认32
    ②pattern  对象的正则表达式
    ③groups  子组数量
    ④groupindex  捕获组名与组序号的字典

-------------------------------------------------------
作业:找一个文档,完成如下操作
      1,找到所有大写字母开头的单词
      2,找到其中所有数字,数字包含整数,小数,分数,百分数,负数
      3,将所有日期格式2019-2-3变为2019.2.3

compile
findall()
split()
sub()
subn()
finditer()
fullmatch()
match()
search()
-------------------------------------------------------
九,match对象的属性方法
  1,属性变量
    pos       匹配的目标字符串开始位置
    endpos    匹配的目标字符串结束位置
    re        正则
    string    目标字符串
    lastgroup 最后一组名称  最后一组若没有名称则返回None
    lastindex 最后一组序号
  2,属性方法
    span()   获取匹配内容的起止位置
    start()  获取匹配内容的开始位置
    end()    获取匹配内容的结束位置

    groupdict()  获取捕获组字典,组名为键,对应内容为值
    groups()     获取子组对应内容

    group(n=0)
    功能:获取match对象匹配内容
    参数:默认为0表示获取整个match对象内容
        如果是序列号或者组名则表示获取对应子组内容
    返回值:匹配字符串
十,flags参数扩展
  1,使用函数:re模块调用的匹配函数
        如:re.compile,re.findall,re.search...
  2,作用:扩展丰富正则表达式的匹配功能
  3,常用flag
    A==ASCII         元字符只能匹配ascii码
    I==IGNORECASE    匹配忽略字母的大小写
    S==DOTALL        使 . 可以匹配换行
    M==MULTILINE     使 ^ $ 可以匹配每一行的开头结尾位置
    X==VERBOSE       为正则添加注释
  4,使用多个flag
    方法:按位或连接
      例:flags=re.I|re.A