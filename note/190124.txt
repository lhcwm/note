1,多态:相同的方法,不同的表现
  1,事物除了共性外,还具有各自的特性(个性)
    多态就是用来处理事物的个性
  2,多态能够在不影响父类行为(不修改父类代码)的情况下,进行功能的扩展和变更
  3,使程序(软件设计)更具有灵活性

2,方法的重写:
   父类中定义的方法子类中重新定义
3,多态的实现:
  通过子类中重写父类的方法实现多态

4,面向对象的技术特性:
  1,构造和析构
    a,构造方法
      名称:在Python中,固定为__init__
      作用:为对象创建属性,并且赋予初始值
      调用时机:对象被创建(实例化)自动调用
      如果在类中未定义,Python会给出默认的构造方法
      在继承关系中,如果父类定义了__init__方法,在子类的构造方法中,必须调用父类的构造方法
    
    b,析构方法:
      名称:__del__
      调用时机:对象被销毁时自动调用
               del obj,局部变量退出作用域,程序退出
      作用:对象销毁时,执行清理操作
  
   2,多重继承:一个类有多个父类
      多继承:定义类的时候,继承自多个父类,父类之间用逗号隔开
       语法:  class 类名称(父类1,父类2...)
                     语句块
      通过多重继承,子类具有所有父类的特征和行为
      如果多个父类有相同的方法(或属性名称),通过类的__mro__属性中记录的顺序进行方法查找

      总的原则:
        按照由上至下,从左到右(继承列表中前后)进行查找,知道object类,如果都没找到就报错
  3,object类
    所有类的总父类,如果定义类时候,没有指定父类,则默认从object类继承
    类的父类可以通过__base__属性查看

  4,super()和issubclass()
    super()函数
     作用: 返回绑定的父类
           有时候需要显示调用的父类方法时就用super函数
     格式:  super(type,obj)返回obj对象的父类
            super()返回当前对象的父类,只能在类的方法中调用

       子类与父类同时定义了属性,在子类中需要调用一下父类的属性,否则子类是没有的
   issubclass:判断一个类是否是另一个类的子类,如果是返回True,不是返回False
       格式:issubclass(cls,class_or_tuple)

  5,函数重写
    1,对象转字符串函数的重写
      str(): 重写__str__()   将对象转换成人阅读的字符串
      repr():重写__repr__()  返回字符串,给Python解释器阅读
           通过eval(repr(obj))能够还原obj对象 	

     当调用str(obj)将对象转换成字符串时,其搜索顺序为:
      1,优先查找obj.__str__()方法  #包括父类
      2,如果上一步不存在,则调用obj.__repr__()+
      3,如果上一步不存在,则调用object.__repr__()

   2,内建函数重写
     abs()函数:  重写__abs__()
     len()函数   重写__len__()
     reversed()函数  重写__reversed__()
     round()函数  重写__round__()
   
   3,数值转换函数重写
     int()函数: 重写__int__()
     float()函数: 重写__float__()
     complex()函数: 重写__complex__()
     bool()函数:  重写__bool__()
   
   4,属性管理函数:
     操作对象的属性,
     1,getattr:获取对象的属性值
           格式:getattr(obj,name[,default])
           作用:等同于obj.name
     2,setattr:设置对象的属性值
           格式:setattr(obj,name,value)
           作用:等同于obj.name=value
     3,hasattr:判断有没有某个属性值
           格式:hasattr(obj,name) 
           返回布尔值,有返回True
     4,delattr:删除对象某个属性值
           格式:delattr(obj,name)
           等同于del obj.name
