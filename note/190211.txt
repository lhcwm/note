 6,查看授权
   查看当前用户:show grants;
   查看其他用户:show grants for '用户名'@'客户端'

 7,吊销权限
   语法:revoke 权限列表 on 库名.表名
       from '用户名'@'客户端地址'

   示例:revoke insert on *.* from 'lhc'@'%';

4,数据库事务(重点)
  1,事务(Transaction):数据库执行的一系列操作,要么全都执行,要么全都不执行
  2,事务作用:保证数据一致性,正确性
    例如:
    在一笔账中,需执行三个操作:
    从转出账户减去相应的金额
    再转入账户增加相应的金额
    登记一笔转账明细
    以上三个操作,要么全部成功,要么全部失败
  3,使用事务的情况
    涉及到多表的增删改操作
    执行这些操作是需要保证一致性,正确性
  4,启用事务条件要求
    必须是innodb存储引擎
  5,事务的特性(ACID)
    原子性(Atomicity):事务是一个整体,要么全部执行,要么全不执行
    一致性(copsistency):事务执行完成后,从一个一致状态变成另一个一致状态
    隔离性(Isolation):不同的事务不会相互干扰,影响
    持久性(Durability):一旦事务提交,对数据库的修改就必须永久保留下来
  6,事务操作:
    开启事务:start Transaction
    提交:commit
    回滚:rollback
    示例:在两个账户间进行转账
        第一步:减去转出账户余额
        第二步:在转入账户加上相等的余额
        第三步:提交事务

        start transaction;
        update acct set balance = balance-100
            where acct_no='11';
        update acct set balance = balance+100
            where acct_no='22';
        commit;
        在提交之前,重新登录一个客户端,查看数据是否变更

  7,SQL语句分类:
    数据查询语言(dql):查询数据,不改变数据
    数据定义语言(ddl):定义数据结构,如建表/库,删除表/库 ,创建删除索引,修改表结构
    数据操作语言(dml):对数据进行增删改
    数据控制语言(dcl):权限管理,事务操作,数据库监视...



1,锁:
  1,定义:对数据的控制,操作权
  2,目的:解决多个工作单元并发操作数据的问题
  3,锁的分类:
    a.锁类型:
      读锁(共享锁):查询时加锁,加锁后可以进行读操作,不能写
      写锁(排它锁):增删改时加锁,加锁后不能读/写操作.
    b.锁的粒度(范围大小):
      行级锁:锁定某一行,并发效率高,消耗资源较多
      表级锁:一次直接锁定整个表,并发效率低,资源消耗少.
2,存储引擎:
 1,定义:表的存储方式,包括存储机制,索引机制,锁定方式等
 2,基本操作:
   查看:show engines;
   查看某个表的存储引擎方式:show create table 表名

   建表时指定存储引擎
   create table t(id int primary key)
   engine=innodb default charset=utf8;

   修改存储引擎:
   alter table t engine=MyISAM;

 3,常用存储引擎:
   a.innodb
     特点:支持事务,行级锁,外键
     共享表空间
      *.frm 存储表结构和索引
      *.ibd 表记录,存储数据
      show global variables like '%datadir'
      命令查看数据存储位置

     适用场合:
      更新操作密集的表
      有数据库事务支持的要求
      有自动灾备,恢复要求
      有外键约束要求
      有支持自增长字段(auto_increment)要求

   b.MyISAM
     支持表级锁定,不支持事务,外键,行锁定,访问速度较快
     独享表空间
      *.frm  表结构
      *.myd  表数据
      *.myi  表索引

     适用场合:
     查询请求较多
     数据一致性要求较低
     不要求外键约束

   c.Memory
     表结构存储于硬盘,表记录存储于内存
     服务器重启后,表记录消失
     适用场合:
      数据量小
      访问速度要求高
      数据丢失不会造成影响

3,E-R模型:实体关系模型
  a.实体:现实中可以被区分的事物,要描述的对象
  b.属性:实体所具有的数据特性
  c.关系:实体之间的联系
    一对一:丈夫--妻子
    一对多:父母--孩子
    多对多:兄弟姐妹--兄弟姐妹
  d. E-R描述方式:E-R关系图

4.Python访问mysql数据库:pymysql
  1,pymysql的安装
    在线:sudo pip3 install pymysql
    离线:下载安装包
        https://pypi.org/project/pymysql/#files

        解压:
        tar -zxvf pymysql-0.9.3.tar.gz
        
        进入目录,安装
        Python3 setup.py install
        
        验证:
        进入python交互模式,执行导入(import pymysql),不报错则说明成功

  2,pymysql操作数据库的步骤:
    1,导入pymysql模块
    2,建立数据库连接
    3,获取游标对象
    4,使用游标对象提供的方法,执行sql语句
    5,提交事务(如果需要)
    6,关闭游标
    7,关闭数据库连接

    示例:
# 1,导入pymysql模块
import pymysql
host = 'localhost'
user = 'root'
passwd = '123456'
dbname = 'jason'
#     2,建立数据库连接
conn = pymysql.connect(host,user,passwd,dbname)
#     3,获取游标对象
cursor = conn.cursor()
#     4,使用游标对象提供的方法,执行sql语句
cursor.execute('select * from acct')
result = cursor.fetchall() #取查询到的数据
for r in result:
    temp='账号:%s,户名:%s,金额:%s' % (r[0],r[1],r[6])
    print (temp)
#     5,提交事务(如果需要)
#     6,关闭游标
cursor.close()
#     7,关闭数据库连接
conn.close()


  主要方法:
  connect():连接数据库
  参数:host  服务器地址
      port  端口
      user  用户名
      passwd 密码
      db   数据库名称
      charset 连接数据库使用的编码格式
  返回: 返回一个连接对象

  connection对象支持的方法
  cursor()   获取游标
  commit()   提交事务
  rollback() 回滚事务
  close()    关闭连接

  cursor对象支持的方法
  execute(sql)     执行sql语句
  fetchall()    获取结果集中所有数据
  fetchone()    获取结果集中下一笔数据
  fetchmany(size) 获取结果集中几笔数据
  close()       关闭游标
  rowcount()    只读属性,返回受影响笔数
